# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
library(tidyverse)
library(kohonen)
packages.install('kohonen')
package.install('kohonen')
install.packages('kohonen')
#install.packages('kohonen')
library(kohonen)
library(tidyverse)
# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
df_scaled <- as.data.frame(scale(df_clean))
# SOM pour segmentation
par(mfrow = c(1, 3))
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
som_model <- som(as.matrix(df_scaled), grid = som_grid, rlen = 100)
plot(som_model, type="mapping", main="Carte SOM avec clusters")
plot(som_model, type="count", main="Number of obs per cluster")
plot(som_model, type="codes", main="Clusters SOM with attributes")
# Attribution des clusters
som_clusters <- cutree(hclust(dist(som_model$codes[[1]])), 5)
df_clean$SOM_Cluster <- som_clusters[som_model$unit.classif]
# Affichage des clusters
print(table(df_clean$SOM_Cluster))
# Sélection des variables pour modèle prédictif
target <- "Response"
df_model <- df %>% select(all_of(features), target) %>% na.omit()
df_model$Response <- as.numeric(as.character(df_model$Response))
# Séparation train/test
set.seed(42)
trainIndex <- createDataPartition(df_model$Response, p = 0.8, list = FALSE)
train_data <- df_model[trainIndex, ]
# Séparation train/test
set.seed(42)
trainIndex <- createDataPartition(df_model$Response, p = 0.8, list = FALSE)
library(caret)
#install.packages('kohonen')
install.packages('caret')
#install.packages('kohonen')
#install.packages('caret')
library(kohonen)
library(tidyverse)
library(caret)
# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
df_scaled <- as.data.frame(scale(df_clean))
# SOM pour segmentation
par(mfrow = c(1, 3))
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
som_model <- som(as.matrix(df_scaled), grid = som_grid, rlen = 100)
plot(som_model, type="mapping", main="Carte SOM avec clusters")
plot(som_model, type="count", main="Number of obs per cluster")
plot(som_model, type="codes", main="Clusters SOM with attributes")
# Attribution des clusters
som_clusters <- cutree(hclust(dist(som_model$codes[[1]])), 5)
df_clean$SOM_Cluster <- som_clusters[som_model$unit.classif]
# Affichage des clusters
print(table(df_clean$SOM_Cluster))
# Sélection des variables pour modèle prédictif
target <- "Response"
df_model <- df %>% select(all_of(features), target) %>% na.omit()
df_model$Response <- as.numeric(as.character(df_model$Response))
# Séparation train/test
set.seed(42)
trainIndex <- createDataPartition(df_model$Response, p = 0.8, list = FALSE)
train_data <- df_model[trainIndex, ]
test_data <- df_model[-trainIndex, ]
# Modèle 1 : Random Forest
rf_model <- randomForest(as.factor(Response) ~ ., data = train_data, ntree = 100)
pred_rf <- predict(rf_model, test_data, type = "prob")[, 2]
# Modèle 2 : Gradient Boosting
gb_model <- gbm(Response ~ ., data = train_data, distribution = "bernoulli", n.trees = 100)
# ajout
som_cluster <- clusterSOM(ClusterCodebooks=som_model$codes,
LengthClustering=nrow(som_model$codes), Mapping=som_model$unit.classif, MapRow=som_model$grid$xdim, MapColumn=som_model$grid$ydim, StoppingCluster=2 )[[5]]
#install.packages('kohonen')
#install.packages('caret')
library(kohonen)
library(tidyverse)
library(caret)
# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
df_scaled <- as.data.frame(scale(df_clean))
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
som_model <- som(as.matrix(df_scaled), grid = som_grid, rlen = 100)
# ajout
som_cluster <- clusterSOM(ClusterCodebooks=som_model$codes,
LengthClustering=nrow(som_model$codes), Mapping=som_model$unit.classif, MapRow=som_model$grid$xdim, MapColumn=som_model$grid$ydim, StoppingCluster=2 )[[5]]
#install.packages('kohonen')
#install.packages('caret')
install.packages("somhca")
#install.packages('kohonen')
#install.packages('caret')
#install.packages("somhca")
library(somhca)
library(kohonen)
library(tidyverse)
library(caret)
# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
df_scaled <- as.data.frame(scale(df_clean))
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
som_model <- som(as.matrix(df_scaled), grid = som_grid, rlen = 100)
# ajout
som_cluster <- clusterSOM(ClusterCodebooks=som_model$codes,
LengthClustering=nrow(som_model$codes), Mapping=som_model$unit.classif, MapRow=som_model$grid$xdim, MapColumn=som_model$grid$ydim, StoppingCluster=2 )[[5]]
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
#install.packages('kohonen')
#install.packages('caret')
uninstall.packages("somhca")
detach("package:somhca", unload = TRUE)
remove.packages("somhca", lib="~/R/x86_64-redhat-linux-gnu-library/4.4")
library(kohonen)
library(tidyverse)
library(caret)
# Charger les données
df <- read.csv("marketing_campaign.csv", sep=";")
# Statistiques descriptives
summary(df)
# Sélection des variables pour segmentation
features <- c("Income", "Kidhome", "Teenhome", "MntWines", "MntFruits",
"MntMeatProducts", "MntFishProducts", "NumWebPurchases",
"NumCatalogPurchases", "NumStorePurchases", "NumWebVisitsMonth")
# Normalisation des données
df_clean <- df %>% select(all_of(features)) %>% na.omit()
df_scaled <- as.data.frame(scale(df_clean))
# SOM pour segmentation
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
som_model <- som(as.matrix(df_scaled), grid = som_grid, rlen = 100)
# Remplacement de clusterSOM par une approche basée sur hclust
codes <- getCodes(som_model)  # Extraction des codes des neurones
dist_matrix <- dist(codes)    # Matrice de distances entre les codes
hc <- hclust(dist_matrix, method = "ward.D2") # Clustering hiérarchique
som_cluster <- cutree(hc, k = 5) # Définition du nombre de clusters
# Palette de couleurs
pretty_palette <- rainbow(length(unique(som_cluster)))
# Visualisation des clusters SOM
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters SOM")
add.cluster.boundaries(som_model, som_cluster)
# Autres visualisations SOM
plot(som_model, type="count", main="Nombre d'observations par cluster")
plot(som_model, type="codes", main="Clusters SOM avec les attributs")
# Attribution des clusters aux données d'origine
df_clean$SOM_Cluster <- som_cluster[som_model$unit.classif]
# Affichage des clusters
print(table(df_clean$SOM_Cluster))
